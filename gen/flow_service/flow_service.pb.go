// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: flow_service/flow_service.proto

package flow_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HTTPMethod int32

const (
	HTTPMethod_POST    HTTPMethod = 0
	HTTPMethod_GET     HTTPMethod = 1
	HTTPMethod_PATCH   HTTPMethod = 2
	HTTPMethod_PUT     HTTPMethod = 3
	HTTPMethod_DELETE  HTTPMethod = 4
	HTTPMethod_HEAD    HTTPMethod = 5
	HTTPMethod_OPTIONS HTTPMethod = 6
)

// Enum value maps for HTTPMethod.
var (
	HTTPMethod_name = map[int32]string{
		0: "POST",
		1: "GET",
		2: "PATCH",
		3: "PUT",
		4: "DELETE",
		5: "HEAD",
		6: "OPTIONS",
	}
	HTTPMethod_value = map[string]int32{
		"POST":    0,
		"GET":     1,
		"PATCH":   2,
		"PUT":     3,
		"DELETE":  4,
		"HEAD":    5,
		"OPTIONS": 6,
	}
)

func (x HTTPMethod) Enum() *HTTPMethod {
	p := new(HTTPMethod)
	*p = x
	return p
}

func (x HTTPMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_service_flow_service_proto_enumTypes[0].Descriptor()
}

func (HTTPMethod) Type() protoreflect.EnumType {
	return &file_flow_service_flow_service_proto_enumTypes[0]
}

func (x HTTPMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPMethod.Descriptor instead.
func (HTTPMethod) EnumDescriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{0}
}

type InboxRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pusher        bool              `protobuf:"varint,3,opt,name=pusher,proto3" json:"pusher,omitempty"`
	HeadCheck     map[string]string `protobuf:"bytes,4,rep,name=head_check,json=headCheck,proto3" json:"head_check,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PusherUrl     string            `protobuf:"bytes,20,opt,name=pusher_url,json=pusherUrl,proto3" json:"pusher_url,omitempty"`
	PusherHead    map[string]string `protobuf:"bytes,21,rep,name=pusher_head,json=pusherHead,proto3" json:"pusher_head,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InfoHits      int32             `protobuf:"varint,40,opt,name=info_hits,json=infoHits,proto3" json:"info_hits,omitempty"`
	InfoCreatedAt string            `protobuf:"bytes,41,opt,name=info_created_at,json=infoCreatedAt,proto3" json:"info_created_at,omitempty"`
	InfoUpdatedAt string            `protobuf:"bytes,42,opt,name=info_updated_at,json=infoUpdatedAt,proto3" json:"info_updated_at,omitempty"`
}

func (x *InboxRecord) Reset() {
	*x = InboxRecord{}
	mi := &file_flow_service_flow_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboxRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboxRecord) ProtoMessage() {}

func (x *InboxRecord) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboxRecord.ProtoReflect.Descriptor instead.
func (*InboxRecord) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{0}
}

func (x *InboxRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InboxRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InboxRecord) GetPusher() bool {
	if x != nil {
		return x.Pusher
	}
	return false
}

func (x *InboxRecord) GetHeadCheck() map[string]string {
	if x != nil {
		return x.HeadCheck
	}
	return nil
}

func (x *InboxRecord) GetPusherUrl() string {
	if x != nil {
		return x.PusherUrl
	}
	return ""
}

func (x *InboxRecord) GetPusherHead() map[string]string {
	if x != nil {
		return x.PusherHead
	}
	return nil
}

func (x *InboxRecord) GetInfoHits() int32 {
	if x != nil {
		return x.InfoHits
	}
	return 0
}

func (x *InboxRecord) GetInfoCreatedAt() string {
	if x != nil {
		return x.InfoCreatedAt
	}
	return ""
}

func (x *InboxRecord) GetInfoUpdatedAt() string {
	if x != nil {
		return x.InfoUpdatedAt
	}
	return ""
}

type OutboxRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Retry         int32    `protobuf:"varint,3,opt,name=retry,proto3" json:"retry,omitempty"`
	Targets       []string `protobuf:"bytes,20,rep,name=targets,proto3" json:"targets,omitempty"`
	Responses     []string `protobuf:"bytes,21,rep,name=responses,proto3" json:"responses,omitempty"`
	Inboxes       []string `protobuf:"bytes,22,rep,name=inboxes,proto3" json:"inboxes,omitempty"`
	InfoHits      int32    `protobuf:"varint,40,opt,name=info_hits,json=infoHits,proto3" json:"info_hits,omitempty"`
	InfoCreatedAt string   `protobuf:"bytes,41,opt,name=info_created_at,json=infoCreatedAt,proto3" json:"info_created_at,omitempty"`
	InfoUpdatedAt string   `protobuf:"bytes,42,opt,name=info_updated_at,json=infoUpdatedAt,proto3" json:"info_updated_at,omitempty"`
}

func (x *OutboxRecord) Reset() {
	*x = OutboxRecord{}
	mi := &file_flow_service_flow_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutboxRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboxRecord) ProtoMessage() {}

func (x *OutboxRecord) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboxRecord.ProtoReflect.Descriptor instead.
func (*OutboxRecord) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{1}
}

func (x *OutboxRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OutboxRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutboxRecord) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *OutboxRecord) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *OutboxRecord) GetResponses() []string {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *OutboxRecord) GetInboxes() []string {
	if x != nil {
		return x.Inboxes
	}
	return nil
}

func (x *OutboxRecord) GetInfoHits() int32 {
	if x != nil {
		return x.InfoHits
	}
	return 0
}

func (x *OutboxRecord) GetInfoCreatedAt() string {
	if x != nil {
		return x.InfoCreatedAt
	}
	return ""
}

func (x *OutboxRecord) GetInfoUpdatedAt() string {
	if x != nil {
		return x.InfoUpdatedAt
	}
	return ""
}

type MsgDeleteIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MsgDeleteIn) Reset() {
	*x = MsgDeleteIn{}
	mi := &file_flow_service_flow_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgDeleteIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDeleteIn) ProtoMessage() {}

func (x *MsgDeleteIn) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDeleteIn.ProtoReflect.Descriptor instead.
func (*MsgDeleteIn) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{2}
}

func (x *MsgDeleteIn) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type MsgDeleteOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *MsgDeleteOut) Reset() {
	*x = MsgDeleteOut{}
	mi := &file_flow_service_flow_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgDeleteOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDeleteOut) ProtoMessage() {}

func (x *MsgDeleteOut) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDeleteOut.ProtoReflect.Descriptor instead.
func (*MsgDeleteOut) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{3}
}

func (x *MsgDeleteOut) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type MsgFindIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query map[string]string `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MsgFindIn) Reset() {
	*x = MsgFindIn{}
	mi := &file_flow_service_flow_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgFindIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFindIn) ProtoMessage() {}

func (x *MsgFindIn) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFindIn.ProtoReflect.Descriptor instead.
func (*MsgFindIn) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{4}
}

func (x *MsgFindIn) GetQuery() map[string]string {
	if x != nil {
		return x.Query
	}
	return nil
}

type MsgGetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MsgGetIn) Reset() {
	*x = MsgGetIn{}
	mi := &file_flow_service_flow_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgGetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgGetIn) ProtoMessage() {}

func (x *MsgGetIn) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgGetIn.ProtoReflect.Descriptor instead.
func (*MsgGetIn) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{5}
}

func (x *MsgGetIn) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type InboxGetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inboxes []*InboxRecord `protobuf:"bytes,1,rep,name=inboxes,proto3" json:"inboxes,omitempty"`
}

func (x *InboxGetOut) Reset() {
	*x = InboxGetOut{}
	mi := &file_flow_service_flow_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboxGetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboxGetOut) ProtoMessage() {}

func (x *InboxGetOut) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboxGetOut.ProtoReflect.Descriptor instead.
func (*InboxGetOut) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{6}
}

func (x *InboxGetOut) GetInboxes() []*InboxRecord {
	if x != nil {
		return x.Inboxes
	}
	return nil
}

type InboxRegisterIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pusher     bool              `protobuf:"varint,2,opt,name=pusher,proto3" json:"pusher,omitempty"`
	HeadCheck  map[string]string `protobuf:"bytes,3,rep,name=head_check,json=headCheck,proto3" json:"head_check,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PusherUrl  string            `protobuf:"bytes,20,opt,name=pusher_url,json=pusherUrl,proto3" json:"pusher_url,omitempty"`
	PusherHead map[string]string `protobuf:"bytes,21,rep,name=pusher_head,json=pusherHead,proto3" json:"pusher_head,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InboxRegisterIn) Reset() {
	*x = InboxRegisterIn{}
	mi := &file_flow_service_flow_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboxRegisterIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboxRegisterIn) ProtoMessage() {}

func (x *InboxRegisterIn) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboxRegisterIn.ProtoReflect.Descriptor instead.
func (*InboxRegisterIn) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{7}
}

func (x *InboxRegisterIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InboxRegisterIn) GetPusher() bool {
	if x != nil {
		return x.Pusher
	}
	return false
}

func (x *InboxRegisterIn) GetHeadCheck() map[string]string {
	if x != nil {
		return x.HeadCheck
	}
	return nil
}

func (x *InboxRegisterIn) GetPusherUrl() string {
	if x != nil {
		return x.PusherUrl
	}
	return ""
}

func (x *InboxRegisterIn) GetPusherHead() map[string]string {
	if x != nil {
		return x.PusherHead
	}
	return nil
}

type InboxRegisterOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *InboxRegisterOut) Reset() {
	*x = InboxRegisterOut{}
	mi := &file_flow_service_flow_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboxRegisterOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboxRegisterOut) ProtoMessage() {}

func (x *InboxRegisterOut) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboxRegisterOut.ProtoReflect.Descriptor instead.
func (*InboxRegisterOut) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{8}
}

func (x *InboxRegisterOut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InboxRegisterOut) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type OutboxGetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inboxes []*OutboxRecord `protobuf:"bytes,1,rep,name=inboxes,proto3" json:"inboxes,omitempty"`
}

func (x *OutboxGetOut) Reset() {
	*x = OutboxGetOut{}
	mi := &file_flow_service_flow_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutboxGetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboxGetOut) ProtoMessage() {}

func (x *OutboxGetOut) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboxGetOut.ProtoReflect.Descriptor instead.
func (*OutboxGetOut) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{9}
}

func (x *OutboxGetOut) GetInboxes() []*OutboxRecord {
	if x != nil {
		return x.Inboxes
	}
	return nil
}

type OutboxRegisterIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Retry     int32    `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
	Targets   []string `protobuf:"bytes,20,rep,name=targets,proto3" json:"targets,omitempty"`
	Responses []string `protobuf:"bytes,21,rep,name=responses,proto3" json:"responses,omitempty"`
	Inboxes   []string `protobuf:"bytes,22,rep,name=inboxes,proto3" json:"inboxes,omitempty"`
}

func (x *OutboxRegisterIn) Reset() {
	*x = OutboxRegisterIn{}
	mi := &file_flow_service_flow_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutboxRegisterIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboxRegisterIn) ProtoMessage() {}

func (x *OutboxRegisterIn) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboxRegisterIn.ProtoReflect.Descriptor instead.
func (*OutboxRegisterIn) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{10}
}

func (x *OutboxRegisterIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutboxRegisterIn) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *OutboxRegisterIn) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *OutboxRegisterIn) GetResponses() []string {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *OutboxRegisterIn) GetInboxes() []string {
	if x != nil {
		return x.Inboxes
	}
	return nil
}

type OutboxRegisterOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OutboxRegisterOut) Reset() {
	*x = OutboxRegisterOut{}
	mi := &file_flow_service_flow_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutboxRegisterOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboxRegisterOut) ProtoMessage() {}

func (x *OutboxRegisterOut) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboxRegisterOut.ProtoReflect.Descriptor instead.
func (*OutboxRegisterOut) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{11}
}

func (x *OutboxRegisterOut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResponseRegisterIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url    string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Method HTTPMethod        `protobuf:"varint,3,opt,name=method,proto3,enum=kontrl.HTTPMethod" json:"method,omitempty"`
	Head   map[string]string `protobuf:"bytes,4,rep,name=head,proto3" json:"head,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResponseRegisterIn) Reset() {
	*x = ResponseRegisterIn{}
	mi := &file_flow_service_flow_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseRegisterIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRegisterIn) ProtoMessage() {}

func (x *ResponseRegisterIn) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRegisterIn.ProtoReflect.Descriptor instead.
func (*ResponseRegisterIn) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{12}
}

func (x *ResponseRegisterIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResponseRegisterIn) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ResponseRegisterIn) GetMethod() HTTPMethod {
	if x != nil {
		return x.Method
	}
	return HTTPMethod_POST
}

func (x *ResponseRegisterIn) GetHead() map[string]string {
	if x != nil {
		return x.Head
	}
	return nil
}

type ResponseRegisterOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResponseRegisterOut) Reset() {
	*x = ResponseRegisterOut{}
	mi := &file_flow_service_flow_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseRegisterOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseRegisterOut) ProtoMessage() {}

func (x *ResponseRegisterOut) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseRegisterOut.ProtoReflect.Descriptor instead.
func (*ResponseRegisterOut) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseRegisterOut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TargetRegisterIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Forget bool              `protobuf:"varint,2,opt,name=forget,proto3" json:"forget,omitempty"`
	Method HTTPMethod        `protobuf:"varint,3,opt,name=method,proto3,enum=kontrl.HTTPMethod" json:"method,omitempty"`
	Head   map[string]string `protobuf:"bytes,4,rep,name=head,proto3" json:"head,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TargetRegisterIn) Reset() {
	*x = TargetRegisterIn{}
	mi := &file_flow_service_flow_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetRegisterIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetRegisterIn) ProtoMessage() {}

func (x *TargetRegisterIn) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetRegisterIn.ProtoReflect.Descriptor instead.
func (*TargetRegisterIn) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{14}
}

func (x *TargetRegisterIn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TargetRegisterIn) GetForget() bool {
	if x != nil {
		return x.Forget
	}
	return false
}

func (x *TargetRegisterIn) GetMethod() HTTPMethod {
	if x != nil {
		return x.Method
	}
	return HTTPMethod_POST
}

func (x *TargetRegisterIn) GetHead() map[string]string {
	if x != nil {
		return x.Head
	}
	return nil
}

type TargetRegisterOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TargetRegisterOut) Reset() {
	*x = TargetRegisterOut{}
	mi := &file_flow_service_flow_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetRegisterOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetRegisterOut) ProtoMessage() {}

func (x *TargetRegisterOut) ProtoReflect() protoreflect.Message {
	mi := &file_flow_service_flow_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetRegisterOut.ProtoReflect.Descriptor instead.
func (*TargetRegisterOut) Descriptor() ([]byte, []int) {
	return file_flow_service_flow_service_proto_rawDescGZIP(), []int{15}
}

func (x *TargetRegisterOut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_flow_service_flow_service_proto protoreflect.FileDescriptor

var file_flow_service_flow_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x03, 0x0a, 0x0b, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x75, 0x73, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6f, 0x6e,
	0x74, 0x72, 0x6c, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x64,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x02, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x69, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x1f, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x1e, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x22, 0x79, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x12, 0x32, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b,
	0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x38, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1c, 0x0a, 0x08, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x0b, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x6f, 0x6e, 0x74,
	0x72, 0x6c, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x6f,
	0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x48, 0x0a,
	0x0b, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x73,
	0x68, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x64, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x10, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x3e, 0x0a, 0x0c, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x6f,
	0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xd9, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2a, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x36, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x23, 0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x56, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x32, 0x86,
	0x08, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x52, 0x0a, 0x0b, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e,
	0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x1a, 0x14, 0x2e, 0x6b, 0x6f,
	0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x75,
	0x74, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2f, 0x7b, 0x69, 0x64, 0x73, 0x7d, 0x12, 0x4c, 0x0a, 0x09, 0x49,
	0x6e, 0x62, 0x6f, 0x78, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72,
	0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x1a, 0x13, 0x2e, 0x6b, 0x6f,
	0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x08, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x13, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x2f, 0x7b, 0x69, 0x64, 0x73, 0x7d, 0x12, 0x59, 0x0a, 0x0d, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x1a, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x62, 0x6f,
	0x78, 0x12, 0x54, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x13, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x1a, 0x14, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e,
	0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x2f, 0x7b, 0x69, 0x64, 0x73, 0x7d, 0x12, 0x4f, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x1a, 0x14, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72,
	0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x78, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x78, 0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x14, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c,
	0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x78, 0x2f, 0x7b, 0x69, 0x64, 0x73, 0x7d, 0x12, 0x5d, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x6b, 0x6f, 0x6e,
	0x74, 0x72, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x1a, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x58, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x6b, 0x6f, 0x6e, 0x74,
	0x72, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x1a, 0x14,
	0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x73,
	0x7d, 0x12, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x1a, 0x1b, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72,
	0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x1a, 0x14, 0x2e,
	0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x75, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x73, 0x7d, 0x12, 0x47,
	0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x74, 0x72, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x19, 0x2e, 0x6b, 0x6f, 0x6e,
	0x74, 0x72, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x64, 0x75, 0x61, 0x72, 0x64, 0x6f, 0x62, 0x61, 0x63,
	0x61, 0x72, 0x69, 0x6e, 0x2f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flow_service_flow_service_proto_rawDescOnce sync.Once
	file_flow_service_flow_service_proto_rawDescData = file_flow_service_flow_service_proto_rawDesc
)

func file_flow_service_flow_service_proto_rawDescGZIP() []byte {
	file_flow_service_flow_service_proto_rawDescOnce.Do(func() {
		file_flow_service_flow_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_flow_service_flow_service_proto_rawDescData)
	})
	return file_flow_service_flow_service_proto_rawDescData
}

var file_flow_service_flow_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flow_service_flow_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_flow_service_flow_service_proto_goTypes = []any{
	(HTTPMethod)(0),             // 0: kontrl.HTTPMethod
	(*InboxRecord)(nil),         // 1: kontrl.InboxRecord
	(*OutboxRecord)(nil),        // 2: kontrl.OutboxRecord
	(*MsgDeleteIn)(nil),         // 3: kontrl.MsgDeleteIn
	(*MsgDeleteOut)(nil),        // 4: kontrl.MsgDeleteOut
	(*MsgFindIn)(nil),           // 5: kontrl.MsgFindIn
	(*MsgGetIn)(nil),            // 6: kontrl.MsgGetIn
	(*InboxGetOut)(nil),         // 7: kontrl.InboxGetOut
	(*InboxRegisterIn)(nil),     // 8: kontrl.InboxRegisterIn
	(*InboxRegisterOut)(nil),    // 9: kontrl.InboxRegisterOut
	(*OutboxGetOut)(nil),        // 10: kontrl.OutboxGetOut
	(*OutboxRegisterIn)(nil),    // 11: kontrl.OutboxRegisterIn
	(*OutboxRegisterOut)(nil),   // 12: kontrl.OutboxRegisterOut
	(*ResponseRegisterIn)(nil),  // 13: kontrl.ResponseRegisterIn
	(*ResponseRegisterOut)(nil), // 14: kontrl.ResponseRegisterOut
	(*TargetRegisterIn)(nil),    // 15: kontrl.TargetRegisterIn
	(*TargetRegisterOut)(nil),   // 16: kontrl.TargetRegisterOut
	nil,                         // 17: kontrl.InboxRecord.HeadCheckEntry
	nil,                         // 18: kontrl.InboxRecord.PusherHeadEntry
	nil,                         // 19: kontrl.MsgFindIn.QueryEntry
	nil,                         // 20: kontrl.InboxRegisterIn.HeadCheckEntry
	nil,                         // 21: kontrl.InboxRegisterIn.PusherHeadEntry
	nil,                         // 22: kontrl.ResponseRegisterIn.HeadEntry
	nil,                         // 23: kontrl.TargetRegisterIn.HeadEntry
}
var file_flow_service_flow_service_proto_depIdxs = []int32{
	17, // 0: kontrl.InboxRecord.head_check:type_name -> kontrl.InboxRecord.HeadCheckEntry
	18, // 1: kontrl.InboxRecord.pusher_head:type_name -> kontrl.InboxRecord.PusherHeadEntry
	19, // 2: kontrl.MsgFindIn.query:type_name -> kontrl.MsgFindIn.QueryEntry
	1,  // 3: kontrl.InboxGetOut.inboxes:type_name -> kontrl.InboxRecord
	20, // 4: kontrl.InboxRegisterIn.head_check:type_name -> kontrl.InboxRegisterIn.HeadCheckEntry
	21, // 5: kontrl.InboxRegisterIn.pusher_head:type_name -> kontrl.InboxRegisterIn.PusherHeadEntry
	2,  // 6: kontrl.OutboxGetOut.inboxes:type_name -> kontrl.OutboxRecord
	0,  // 7: kontrl.ResponseRegisterIn.method:type_name -> kontrl.HTTPMethod
	22, // 8: kontrl.ResponseRegisterIn.head:type_name -> kontrl.ResponseRegisterIn.HeadEntry
	0,  // 9: kontrl.TargetRegisterIn.method:type_name -> kontrl.HTTPMethod
	23, // 10: kontrl.TargetRegisterIn.head:type_name -> kontrl.TargetRegisterIn.HeadEntry
	3,  // 11: kontrl.Flow.InboxDelete:input_type -> kontrl.MsgDeleteIn
	5,  // 12: kontrl.Flow.InboxFind:input_type -> kontrl.MsgFindIn
	6,  // 13: kontrl.Flow.InboxGet:input_type -> kontrl.MsgGetIn
	8,  // 14: kontrl.Flow.InboxRegister:input_type -> kontrl.InboxRegisterIn
	3,  // 15: kontrl.Flow.OutboxDelete:input_type -> kontrl.MsgDeleteIn
	5,  // 16: kontrl.Flow.OutboxFind:input_type -> kontrl.MsgFindIn
	6,  // 17: kontrl.Flow.OutboxGet:input_type -> kontrl.MsgGetIn
	11, // 18: kontrl.Flow.OutboxRegister:input_type -> kontrl.OutboxRegisterIn
	3,  // 19: kontrl.Flow.ResponseDelete:input_type -> kontrl.MsgDeleteIn
	13, // 20: kontrl.Flow.ResponseRegister:input_type -> kontrl.ResponseRegisterIn
	3,  // 21: kontrl.Flow.TargetDelete:input_type -> kontrl.MsgDeleteIn
	15, // 22: kontrl.Flow.TargetRegister:input_type -> kontrl.TargetRegisterIn
	4,  // 23: kontrl.Flow.InboxDelete:output_type -> kontrl.MsgDeleteOut
	7,  // 24: kontrl.Flow.InboxFind:output_type -> kontrl.InboxGetOut
	7,  // 25: kontrl.Flow.InboxGet:output_type -> kontrl.InboxGetOut
	9,  // 26: kontrl.Flow.InboxRegister:output_type -> kontrl.InboxRegisterOut
	4,  // 27: kontrl.Flow.OutboxDelete:output_type -> kontrl.MsgDeleteOut
	10, // 28: kontrl.Flow.OutboxFind:output_type -> kontrl.OutboxGetOut
	10, // 29: kontrl.Flow.OutboxGet:output_type -> kontrl.OutboxGetOut
	12, // 30: kontrl.Flow.OutboxRegister:output_type -> kontrl.OutboxRegisterOut
	4,  // 31: kontrl.Flow.ResponseDelete:output_type -> kontrl.MsgDeleteOut
	14, // 32: kontrl.Flow.ResponseRegister:output_type -> kontrl.ResponseRegisterOut
	4,  // 33: kontrl.Flow.TargetDelete:output_type -> kontrl.MsgDeleteOut
	16, // 34: kontrl.Flow.TargetRegister:output_type -> kontrl.TargetRegisterOut
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_flow_service_flow_service_proto_init() }
func file_flow_service_flow_service_proto_init() {
	if File_flow_service_flow_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flow_service_flow_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flow_service_flow_service_proto_goTypes,
		DependencyIndexes: file_flow_service_flow_service_proto_depIdxs,
		EnumInfos:         file_flow_service_flow_service_proto_enumTypes,
		MessageInfos:      file_flow_service_flow_service_proto_msgTypes,
	}.Build()
	File_flow_service_flow_service_proto = out.File
	file_flow_service_flow_service_proto_rawDesc = nil
	file_flow_service_flow_service_proto_goTypes = nil
	file_flow_service_flow_service_proto_depIdxs = nil
}
